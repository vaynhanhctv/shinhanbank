(async () => {
  // Th∆∞ m·ª•c ch·ª©a c√°c model
  const MODEL_URL = './models';

  // Load c√°c m√¥ h√¨nh face-api.js
  await Promise.all([
    faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),
    faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),
    faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL)
  ]);

  const video = document.getElementById('video');
  const statusEl = document.getElementById('status');
  const retryBtn = document.getElementById('btn-retry');

  // M·ªü camera
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ video: {} });
    video.srcObject = stream;
    statusEl.textContent = 'Camera s·∫µn s√†ng. Vui l√≤ng gi·ªØ m·∫∑t tr∆∞·ªõc camera.';
  } catch (err) {
    statusEl.textContent = '‚ùå Kh√¥ng th·ªÉ m·ªü camera.';
    console.error(err);
    return;
  }

  // B∆∞·ªõc 1: Ch·ª•p m·∫´u l·∫ßn ƒë·∫ßu l√†m reference
  let referenceDescriptor = null;
  statusEl.textContent = 'üì∏ Vui l√≤ng nh√¨n th·∫≥ng v√†o camera ƒë·ªÉ l·∫•y m·∫´u.';
  await new Promise(res => setTimeout(res, 2000));
  
  // Nh·∫≠n di·ªán v√† l∆∞u descriptor
  const refDetection = await faceapi
    .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
    .withFaceLandmarks()
    .withFaceDescriptor();

  if (!refDetection) {
    statusEl.textContent = '‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t m·∫´u.';
    retryBtn.style.display = 'inline-block';
    return;
  }

  referenceDescriptor = refDetection.descriptor;
  statusEl.textContent = '‚úîÔ∏è M·∫´u ƒë√£ ƒë∆∞·ª£c l∆∞u. Chu·∫©n b·ªã x√°c th·ª±c‚Ä¶';

  // B∆∞·ªõc 2: So s√°nh v·ªõi l·∫ßn ch·ª•p ti·∫øp theo
  await new Promise(res => setTimeout(res, 1500));
  statusEl.textContent = 'ü§ñ Vui l√≤ng ƒë∆∞a m·∫∑t v√†o camera l·∫ßn 2 ƒë·ªÉ x√°c th·ª±c.';

  const queryDetection = await faceapi
    .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
    .withFaceLandmarks()
    .withFaceDescriptor();

  if (!queryDetection) {
    statusEl.textContent = '‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t.';
    retryBtn.style.display = 'inline-block';
    return;
  }

  const distance = faceapi.euclideanDistance(referenceDescriptor, queryDetection.descriptor);
  const threshold = 0.6;

  if (distance < threshold) {
    statusEl.textContent = `‚úÖ X√°c th·ª±c th√†nh c√¥ng! (distance=${distance.toFixed(3)})`;
    setTimeout(() => window.location.href = '../pages/vi/step4.html', 2000);
  } else {
    statusEl.textContent = `‚ùå X√°c th·ª±c th·∫•t b·∫°i (distance=${distance.toFixed(3)}).`;
    retryBtn.style.display = 'inline-block';
  }

  retryBtn.onclick = () => location.reload();
})();
